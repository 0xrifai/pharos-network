/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/dotenv@16.6.1";
exports.ids = ["vendor-chunks/dotenv@16.6.1"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/dotenv@16.6.1/node_modules/dotenv/config.js":
/*!************************************************************************!*\
  !*** ./node_modules/.pnpm/dotenv@16.6.1/node_modules/dotenv/config.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("(function() {\n    (__webpack_require__(/*! ./lib/main */ \"(rsc)/./node_modules/.pnpm/dotenv@16.6.1/node_modules/dotenv/lib/main.js\").config)(Object.assign({}, __webpack_require__(/*! ./lib/env-options */ \"(rsc)/./node_modules/.pnpm/dotenv@16.6.1/node_modules/dotenv/lib/env-options.js\"), __webpack_require__(/*! ./lib/cli-options */ \"(rsc)/./node_modules/.pnpm/dotenv@16.6.1/node_modules/dotenv/lib/cli-options.js\")(process.argv)));\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vZG90ZW52QDE2LjYuMS9ub2RlX21vZHVsZXMvZG90ZW52L2NvbmZpZy5qcyIsIm1hcHBpbmdzIjoiQUFBQztJQUNDQSwwSEFBNEIsQ0FDMUJFLE9BQU9DLE1BQU0sQ0FDWCxDQUFDLEdBQ0RILG1CQUFPQSxDQUFDLDZHQUNSQSxtQkFBT0EsQ0FBQyw0R0FBcUJJLFFBQVFDLElBQUk7QUFHL0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9waGFyb3MtbmV0d29yay1uZXh0anMvLi9ub2RlX21vZHVsZXMvLnBucG0vZG90ZW52QDE2LjYuMS9ub2RlX21vZHVsZXMvZG90ZW52L2NvbmZpZy5qcz81N2M5Il0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAoKSB7XG4gIHJlcXVpcmUoJy4vbGliL21haW4nKS5jb25maWcoXG4gICAgT2JqZWN0LmFzc2lnbihcbiAgICAgIHt9LFxuICAgICAgcmVxdWlyZSgnLi9saWIvZW52LW9wdGlvbnMnKSxcbiAgICAgIHJlcXVpcmUoJy4vbGliL2NsaS1vcHRpb25zJykocHJvY2Vzcy5hcmd2KVxuICAgIClcbiAgKVxufSkoKVxuIl0sIm5hbWVzIjpbInJlcXVpcmUiLCJjb25maWciLCJPYmplY3QiLCJhc3NpZ24iLCJwcm9jZXNzIiwiYXJndiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/dotenv@16.6.1/node_modules/dotenv/config.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/dotenv@16.6.1/node_modules/dotenv/lib/cli-options.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/.pnpm/dotenv@16.6.1/node_modules/dotenv/lib/cli-options.js ***!
  \*********************************************************************************/
/***/ ((module) => {

eval("const re = /^dotenv_config_(encoding|path|quiet|debug|override|DOTENV_KEY)=(.+)$/;\nmodule.exports = function optionMatcher(args) {\n    const options = args.reduce(function(acc, cur) {\n        const matches = cur.match(re);\n        if (matches) {\n            acc[matches[1]] = matches[2];\n        }\n        return acc;\n    }, {});\n    if (!(\"quiet\" in options)) {\n        options.quiet = \"true\";\n    }\n    return options;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9waGFyb3MtbmV0d29yay1uZXh0anMvLi9ub2RlX21vZHVsZXMvLnBucG0vZG90ZW52QDE2LjYuMS9ub2RlX21vZHVsZXMvZG90ZW52L2xpYi9jbGktb3B0aW9ucy5qcz8wOGUxIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHJlID0gL15kb3RlbnZfY29uZmlnXyhlbmNvZGluZ3xwYXRofHF1aWV0fGRlYnVnfG92ZXJyaWRlfERPVEVOVl9LRVkpPSguKykkL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG9wdGlvbk1hdGNoZXIgKGFyZ3MpIHtcbiAgY29uc3Qgb3B0aW9ucyA9IGFyZ3MucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGN1cikge1xuICAgIGNvbnN0IG1hdGNoZXMgPSBjdXIubWF0Y2gocmUpXG4gICAgaWYgKG1hdGNoZXMpIHtcbiAgICAgIGFjY1ttYXRjaGVzWzFdXSA9IG1hdGNoZXNbMl1cbiAgICB9XG4gICAgcmV0dXJuIGFjY1xuICB9LCB7fSlcblxuICBpZiAoISgncXVpZXQnIGluIG9wdGlvbnMpKSB7XG4gICAgb3B0aW9ucy5xdWlldCA9ICd0cnVlJ1xuICB9XG5cbiAgcmV0dXJuIG9wdGlvbnNcbn1cbiJdLCJuYW1lcyI6WyJyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJvcHRpb25NYXRjaGVyIiwiYXJncyIsIm9wdGlvbnMiLCJyZWR1Y2UiLCJhY2MiLCJjdXIiLCJtYXRjaGVzIiwibWF0Y2giLCJxdWlldCJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsS0FBSztBQUVYQyxPQUFPQyxPQUFPLEdBQUcsU0FBU0MsY0FBZUMsSUFBSTtJQUMzQyxNQUFNQyxVQUFVRCxLQUFLRSxNQUFNLENBQUMsU0FBVUMsR0FBRyxFQUFFQyxHQUFHO1FBQzVDLE1BQU1DLFVBQVVELElBQUlFLEtBQUssQ0FBQ1Y7UUFDMUIsSUFBSVMsU0FBUztZQUNYRixHQUFHLENBQUNFLE9BQU8sQ0FBQyxFQUFFLENBQUMsR0FBR0EsT0FBTyxDQUFDLEVBQUU7UUFDOUI7UUFDQSxPQUFPRjtJQUNULEdBQUcsQ0FBQztJQUVKLElBQUksQ0FBRSxDQUFBLFdBQVdGLE9BQU0sR0FBSTtRQUN6QkEsUUFBUU0sS0FBSyxHQUFHO0lBQ2xCO0lBRUEsT0FBT047QUFDVCIsImZpbGUiOiIocnNjKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9kb3RlbnZAMTYuNi4xL25vZGVfbW9kdWxlcy9kb3RlbnYvbGliL2NsaS1vcHRpb25zLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/dotenv@16.6.1/node_modules/dotenv/lib/cli-options.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/dotenv@16.6.1/node_modules/dotenv/lib/env-options.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/.pnpm/dotenv@16.6.1/node_modules/dotenv/lib/env-options.js ***!
  \*********************************************************************************/
/***/ ((module) => {

eval("// ../config.js accepts options via environment variables\nconst options = {};\nif (process.env.DOTENV_CONFIG_ENCODING != null) {\n    options.encoding = process.env.DOTENV_CONFIG_ENCODING;\n}\nif (process.env.DOTENV_CONFIG_PATH != null) {\n    options.path = process.env.DOTENV_CONFIG_PATH;\n}\nif (process.env.DOTENV_CONFIG_QUIET != null) {\n    options.quiet = process.env.DOTENV_CONFIG_QUIET;\n}\nif (process.env.DOTENV_CONFIG_DEBUG != null) {\n    options.debug = process.env.DOTENV_CONFIG_DEBUG;\n}\nif (process.env.DOTENV_CONFIG_OVERRIDE != null) {\n    options.override = process.env.DOTENV_CONFIG_OVERRIDE;\n}\nif (process.env.DOTENV_CONFIG_DOTENV_KEY != null) {\n    options.DOTENV_KEY = process.env.DOTENV_CONFIG_DOTENV_KEY;\n}\nmodule.exports = options;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9waGFyb3MtbmV0d29yay1uZXh0anMvLi9ub2RlX21vZHVsZXMvLnBucG0vZG90ZW52QDE2LjYuMS9ub2RlX21vZHVsZXMvZG90ZW52L2xpYi9lbnYtb3B0aW9ucy5qcz8wZTMyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIC4uL2NvbmZpZy5qcyBhY2NlcHRzIG9wdGlvbnMgdmlhIGVudmlyb25tZW50IHZhcmlhYmxlc1xuY29uc3Qgb3B0aW9ucyA9IHt9XG5cbmlmIChwcm9jZXNzLmVudi5ET1RFTlZfQ09ORklHX0VOQ09ESU5HICE9IG51bGwpIHtcbiAgb3B0aW9ucy5lbmNvZGluZyA9IHByb2Nlc3MuZW52LkRPVEVOVl9DT05GSUdfRU5DT0RJTkdcbn1cblxuaWYgKHByb2Nlc3MuZW52LkRPVEVOVl9DT05GSUdfUEFUSCAhPSBudWxsKSB7XG4gIG9wdGlvbnMucGF0aCA9IHByb2Nlc3MuZW52LkRPVEVOVl9DT05GSUdfUEFUSFxufVxuXG5pZiAocHJvY2Vzcy5lbnYuRE9URU5WX0NPTkZJR19RVUlFVCAhPSBudWxsKSB7XG4gIG9wdGlvbnMucXVpZXQgPSBwcm9jZXNzLmVudi5ET1RFTlZfQ09ORklHX1FVSUVUXG59XG5cbmlmIChwcm9jZXNzLmVudi5ET1RFTlZfQ09ORklHX0RFQlVHICE9IG51bGwpIHtcbiAgb3B0aW9ucy5kZWJ1ZyA9IHByb2Nlc3MuZW52LkRPVEVOVl9DT05GSUdfREVCVUdcbn1cblxuaWYgKHByb2Nlc3MuZW52LkRPVEVOVl9DT05GSUdfT1ZFUlJJREUgIT0gbnVsbCkge1xuICBvcHRpb25zLm92ZXJyaWRlID0gcHJvY2Vzcy5lbnYuRE9URU5WX0NPTkZJR19PVkVSUklERVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuRE9URU5WX0NPTkZJR19ET1RFTlZfS0VZICE9IG51bGwpIHtcbiAgb3B0aW9ucy5ET1RFTlZfS0VZID0gcHJvY2Vzcy5lbnYuRE9URU5WX0NPTkZJR19ET1RFTlZfS0VZXG59XG5cbm1vZHVsZS5leHBvcnRzID0gb3B0aW9uc1xuIl0sIm5hbWVzIjpbIm9wdGlvbnMiLCJwcm9jZXNzIiwiZW52IiwiRE9URU5WX0NPTkZJR19FTkNPRElORyIsImVuY29kaW5nIiwiRE9URU5WX0NPTkZJR19QQVRIIiwicGF0aCIsIkRPVEVOVl9DT05GSUdfUVVJRVQiLCJxdWlldCIsIkRPVEVOVl9DT05GSUdfREVCVUciLCJkZWJ1ZyIsIkRPVEVOVl9DT05GSUdfT1ZFUlJJREUiLCJvdmVycmlkZSIsIkRPVEVOVl9DT05GSUdfRE9URU5WX0tFWSIsIkRPVEVOVl9LRVkiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSx5REFBeUQ7QUFDekQsTUFBTUEsVUFBVSxDQUFDO0FBRWpCLElBQUlDLFFBQVFDLEdBQUcsQ0FBQ0Msc0JBQXNCLElBQUksTUFBTTtJQUM5Q0gsUUFBUUksUUFBUSxHQUFHSCxRQUFRQyxHQUFHLENBQUNDLHNCQUFzQjtBQUN2RDtBQUVBLElBQUlGLFFBQVFDLEdBQUcsQ0FBQ0csa0JBQWtCLElBQUksTUFBTTtJQUMxQ0wsUUFBUU0sSUFBSSxHQUFHTCxRQUFRQyxHQUFHLENBQUNHLGtCQUFrQjtBQUMvQztBQUVBLElBQUlKLFFBQVFDLEdBQUcsQ0FBQ0ssbUJBQW1CLElBQUksTUFBTTtJQUMzQ1AsUUFBUVEsS0FBSyxHQUFHUCxRQUFRQyxHQUFHLENBQUNLLG1CQUFtQjtBQUNqRDtBQUVBLElBQUlOLFFBQVFDLEdBQUcsQ0FBQ08sbUJBQW1CLElBQUksTUFBTTtJQUMzQ1QsUUFBUVUsS0FBSyxHQUFHVCxRQUFRQyxHQUFHLENBQUNPLG1CQUFtQjtBQUNqRDtBQUVBLElBQUlSLFFBQVFDLEdBQUcsQ0FBQ1Msc0JBQXNCLElBQUksTUFBTTtJQUM5Q1gsUUFBUVksUUFBUSxHQUFHWCxRQUFRQyxHQUFHLENBQUNTLHNCQUFzQjtBQUN2RDtBQUVBLElBQUlWLFFBQVFDLEdBQUcsQ0FBQ1csd0JBQXdCLElBQUksTUFBTTtJQUNoRGIsUUFBUWMsVUFBVSxHQUFHYixRQUFRQyxHQUFHLENBQUNXLHdCQUF3QjtBQUMzRDtBQUVBRSxPQUFPQyxPQUFPLEdBQUdoQiIsImZpbGUiOiIocnNjKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9kb3RlbnZAMTYuNi4xL25vZGVfbW9kdWxlcy9kb3RlbnYvbGliL2Vudi1vcHRpb25zLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/dotenv@16.6.1/node_modules/dotenv/lib/env-options.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/dotenv@16.6.1/node_modules/dotenv/lib/main.js":
/*!**************************************************************************!*\
  !*** ./node_modules/.pnpm/dotenv@16.6.1/node_modules/dotenv/lib/main.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const fs = __webpack_require__(/*! fs */ \"fs\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst os = __webpack_require__(/*! os */ \"os\");\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst packageJson = __webpack_require__(/*! ../package.json */ \"(rsc)/./node_modules/.pnpm/dotenv@16.6.1/node_modules/dotenv/package.json\");\nconst version = packageJson.version;\nconst LINE = /(?:^|^)\\s*(?:export\\s+)?([\\w.-]+)(?:\\s*=\\s*?|:\\s+?)(\\s*'(?:\\\\'|[^'])*'|\\s*\"(?:\\\\\"|[^\"])*\"|\\s*`(?:\\\\`|[^`])*`|[^#\\r\\n]+)?\\s*(?:#.*)?(?:$|$)/mg;\n// Parse src into an Object\nfunction parse(src) {\n    const obj = {};\n    // Convert buffer to string\n    let lines = src.toString();\n    // Convert line breaks to same format\n    lines = lines.replace(/\\r\\n?/mg, \"\\n\");\n    let match;\n    while((match = LINE.exec(lines)) != null){\n        const key = match[1];\n        // Default undefined or null to empty string\n        let value = match[2] || \"\";\n        // Remove whitespace\n        value = value.trim();\n        // Check if double quoted\n        const maybeQuote = value[0];\n        // Remove surrounding quotes\n        value = value.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, \"$2\");\n        // Expand newlines if double quoted\n        if (maybeQuote === '\"') {\n            value = value.replace(/\\\\n/g, \"\\n\");\n            value = value.replace(/\\\\r/g, \"\\r\");\n        }\n        // Add to object\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _parseVault(options) {\n    options = options || {};\n    const vaultPath = _vaultPath(options);\n    options.path = vaultPath // parse .env.vault\n    ;\n    const result = DotenvModule.configDotenv(options);\n    if (!result.parsed) {\n        const err = new Error(`MISSING_DATA: Cannot parse ${vaultPath} for an unknown reason`);\n        err.code = \"MISSING_DATA\";\n        throw err;\n    }\n    // handle scenario for comma separated keys - for use with key rotation\n    // example: DOTENV_KEY=\"dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=prod,dotenv://:key_7890@dotenvx.com/vault/.env.vault?environment=prod\"\n    const keys = _dotenvKey(options).split(\",\");\n    const length = keys.length;\n    let decrypted;\n    for(let i = 0; i < length; i++){\n        try {\n            // Get full key\n            const key = keys[i].trim();\n            // Get instructions for decrypt\n            const attrs = _instructions(result, key);\n            // Decrypt\n            decrypted = DotenvModule.decrypt(attrs.ciphertext, attrs.key);\n            break;\n        } catch (error) {\n            // last key\n            if (i + 1 >= length) {\n                throw error;\n            }\n        // try next key\n        }\n    }\n    // Parse decrypted .env string\n    return DotenvModule.parse(decrypted);\n}\nfunction _warn(message) {\n    console.log(`[dotenv@${version}][WARN] ${message}`);\n}\nfunction _debug(message) {\n    console.log(`[dotenv@${version}][DEBUG] ${message}`);\n}\nfunction _log(message) {\n    console.log(`[dotenv@${version}] ${message}`);\n}\nfunction _dotenvKey(options) {\n    // prioritize developer directly setting options.DOTENV_KEY\n    if (options && options.DOTENV_KEY && options.DOTENV_KEY.length > 0) {\n        return options.DOTENV_KEY;\n    }\n    // secondary infra already contains a DOTENV_KEY environment variable\n    if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {\n        return process.env.DOTENV_KEY;\n    }\n    // fallback to empty string\n    return \"\";\n}\nfunction _instructions(result, dotenvKey) {\n    // Parse DOTENV_KEY. Format is a URI\n    let uri;\n    try {\n        uri = new URL(dotenvKey);\n    } catch (error) {\n        if (error.code === \"ERR_INVALID_URL\") {\n            const err = new Error(\"INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development\");\n            err.code = \"INVALID_DOTENV_KEY\";\n            throw err;\n        }\n        throw error;\n    }\n    // Get decrypt key\n    const key = uri.password;\n    if (!key) {\n        const err = new Error(\"INVALID_DOTENV_KEY: Missing key part\");\n        err.code = \"INVALID_DOTENV_KEY\";\n        throw err;\n    }\n    // Get environment\n    const environment = uri.searchParams.get(\"environment\");\n    if (!environment) {\n        const err = new Error(\"INVALID_DOTENV_KEY: Missing environment part\");\n        err.code = \"INVALID_DOTENV_KEY\";\n        throw err;\n    }\n    // Get ciphertext payload\n    const environmentKey = `DOTENV_VAULT_${environment.toUpperCase()}`;\n    const ciphertext = result.parsed[environmentKey] // DOTENV_VAULT_PRODUCTION\n    ;\n    if (!ciphertext) {\n        const err = new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${environmentKey} in your .env.vault file.`);\n        err.code = \"NOT_FOUND_DOTENV_ENVIRONMENT\";\n        throw err;\n    }\n    return {\n        ciphertext,\n        key\n    };\n}\nfunction _vaultPath(options) {\n    let possibleVaultPath = null;\n    if (options && options.path && options.path.length > 0) {\n        if (Array.isArray(options.path)) {\n            for (const filepath of options.path){\n                if (fs.existsSync(filepath)) {\n                    possibleVaultPath = filepath.endsWith(\".vault\") ? filepath : `${filepath}.vault`;\n                }\n            }\n        } else {\n            possibleVaultPath = options.path.endsWith(\".vault\") ? options.path : `${options.path}.vault`;\n        }\n    } else {\n        possibleVaultPath = path.resolve(process.cwd(), \".env.vault\");\n    }\n    if (fs.existsSync(possibleVaultPath)) {\n        return possibleVaultPath;\n    }\n    return null;\n}\nfunction _resolveHome(envPath) {\n    return envPath[0] === \"~\" ? path.join(os.homedir(), envPath.slice(1)) : envPath;\n}\nfunction _configVault(options) {\n    const debug = Boolean(options && options.debug);\n    const quiet = options && \"quiet\" in options ? options.quiet : true;\n    if (debug || !quiet) {\n        _log(\"Loading env from encrypted .env.vault\");\n    }\n    const parsed = DotenvModule._parseVault(options);\n    let processEnv = process.env;\n    if (options && options.processEnv != null) {\n        processEnv = options.processEnv;\n    }\n    DotenvModule.populate(processEnv, parsed, options);\n    return {\n        parsed\n    };\n}\nfunction configDotenv(options) {\n    const dotenvPath = path.resolve(process.cwd(), \".env\");\n    let encoding = \"utf8\";\n    const debug = Boolean(options && options.debug);\n    const quiet = options && \"quiet\" in options ? options.quiet : true;\n    if (options && options.encoding) {\n        encoding = options.encoding;\n    } else {\n        if (debug) {\n            _debug(\"No encoding is specified. UTF-8 is used by default\");\n        }\n    }\n    let optionPaths = [\n        dotenvPath\n    ] // default, look for .env\n    ;\n    if (options && options.path) {\n        if (!Array.isArray(options.path)) {\n            optionPaths = [\n                _resolveHome(options.path)\n            ];\n        } else {\n            optionPaths = [] // reset default\n            ;\n            for (const filepath of options.path){\n                optionPaths.push(_resolveHome(filepath));\n            }\n        }\n    }\n    // Build the parsed data in a temporary object (because we need to return it).  Once we have the final\n    // parsed data, we will combine it with process.env (or options.processEnv if provided).\n    let lastError;\n    const parsedAll = {};\n    for (const path of optionPaths){\n        try {\n            // Specifying an encoding returns a string instead of a buffer\n            const parsed = DotenvModule.parse(fs.readFileSync(path, {\n                encoding\n            }));\n            DotenvModule.populate(parsedAll, parsed, options);\n        } catch (e) {\n            if (debug) {\n                _debug(`Failed to load ${path} ${e.message}`);\n            }\n            lastError = e;\n        }\n    }\n    let processEnv = process.env;\n    if (options && options.processEnv != null) {\n        processEnv = options.processEnv;\n    }\n    DotenvModule.populate(processEnv, parsedAll, options);\n    if (debug || !quiet) {\n        const keysCount = Object.keys(parsedAll).length;\n        const shortPaths = [];\n        for (const filePath of optionPaths){\n            try {\n                const relative = path.relative(process.cwd(), filePath);\n                shortPaths.push(relative);\n            } catch (e) {\n                if (debug) {\n                    _debug(`Failed to load ${filePath} ${e.message}`);\n                }\n                lastError = e;\n            }\n        }\n        _log(`injecting env (${keysCount}) from ${shortPaths.join(\",\")}`);\n    }\n    if (lastError) {\n        return {\n            parsed: parsedAll,\n            error: lastError\n        };\n    } else {\n        return {\n            parsed: parsedAll\n        };\n    }\n}\n// Populates process.env from .env file\nfunction config(options) {\n    // fallback to original dotenv if DOTENV_KEY is not set\n    if (_dotenvKey(options).length === 0) {\n        return DotenvModule.configDotenv(options);\n    }\n    const vaultPath = _vaultPath(options);\n    // dotenvKey exists but .env.vault file does not exist\n    if (!vaultPath) {\n        _warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`);\n        return DotenvModule.configDotenv(options);\n    }\n    return DotenvModule._configVault(options);\n}\nfunction decrypt(encrypted, keyStr) {\n    const key = Buffer.from(keyStr.slice(-64), \"hex\");\n    let ciphertext = Buffer.from(encrypted, \"base64\");\n    const nonce = ciphertext.subarray(0, 12);\n    const authTag = ciphertext.subarray(-16);\n    ciphertext = ciphertext.subarray(12, -16);\n    try {\n        const aesgcm = crypto.createDecipheriv(\"aes-256-gcm\", key, nonce);\n        aesgcm.setAuthTag(authTag);\n        return `${aesgcm.update(ciphertext)}${aesgcm.final()}`;\n    } catch (error) {\n        const isRange = error instanceof RangeError;\n        const invalidKeyLength = error.message === \"Invalid key length\";\n        const decryptionFailed = error.message === \"Unsupported state or unable to authenticate data\";\n        if (isRange || invalidKeyLength) {\n            const err = new Error(\"INVALID_DOTENV_KEY: It must be 64 characters long (or more)\");\n            err.code = \"INVALID_DOTENV_KEY\";\n            throw err;\n        } else if (decryptionFailed) {\n            const err = new Error(\"DECRYPTION_FAILED: Please check your DOTENV_KEY\");\n            err.code = \"DECRYPTION_FAILED\";\n            throw err;\n        } else {\n            throw error;\n        }\n    }\n}\n// Populate process.env with parsed values\nfunction populate(processEnv, parsed, options = {}) {\n    const debug = Boolean(options && options.debug);\n    const override = Boolean(options && options.override);\n    if (typeof parsed !== \"object\") {\n        const err = new Error(\"OBJECT_REQUIRED: Please check the processEnv argument being passed to populate\");\n        err.code = \"OBJECT_REQUIRED\";\n        throw err;\n    }\n    // Set process.env\n    for (const key of Object.keys(parsed)){\n        if (Object.prototype.hasOwnProperty.call(processEnv, key)) {\n            if (override === true) {\n                processEnv[key] = parsed[key];\n            }\n            if (debug) {\n                if (override === true) {\n                    _debug(`\"${key}\" is already defined and WAS overwritten`);\n                } else {\n                    _debug(`\"${key}\" is already defined and was NOT overwritten`);\n                }\n            }\n        } else {\n            processEnv[key] = parsed[key];\n        }\n    }\n}\nconst DotenvModule = {\n    configDotenv,\n    _configVault,\n    _parseVault,\n    config,\n    decrypt,\n    parse,\n    populate\n};\nmodule.exports.configDotenv = DotenvModule.configDotenv;\nmodule.exports._configVault = DotenvModule._configVault;\nmodule.exports._parseVault = DotenvModule._parseVault;\nmodule.exports.config = DotenvModule.config;\nmodule.exports.decrypt = DotenvModule.decrypt;\nmodule.exports.parse = DotenvModule.parse;\nmodule.exports.populate = DotenvModule.populate;\nmodule.exports = DotenvModule;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/dotenv@16.6.1/node_modules/dotenv/lib/main.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/dotenv@16.6.1/node_modules/dotenv/package.json":
/*!***************************************************************************!*\
  !*** ./node_modules/.pnpm/dotenv@16.6.1/node_modules/dotenv/package.json ***!
  \***************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"name":"dotenv","version":"16.6.1","description":"Loads environment variables from .env file","main":"lib/main.js","types":"lib/main.d.ts","exports":{".":{"types":"./lib/main.d.ts","require":"./lib/main.js","default":"./lib/main.js"},"./config":"./config.js","./config.js":"./config.js","./lib/env-options":"./lib/env-options.js","./lib/env-options.js":"./lib/env-options.js","./lib/cli-options":"./lib/cli-options.js","./lib/cli-options.js":"./lib/cli-options.js","./package.json":"./package.json"},"scripts":{"dts-check":"tsc --project tests/types/tsconfig.json","lint":"standard","pretest":"npm run lint && npm run dts-check","test":"tap run --allow-empty-coverage --disable-coverage --timeout=60000","test:coverage":"tap run --show-full-coverage --timeout=60000 --coverage-report=text --coverage-report=lcov","prerelease":"npm test","release":"standard-version"},"repository":{"type":"git","url":"git://github.com/motdotla/dotenv.git"},"homepage":"https://github.com/motdotla/dotenv#readme","funding":"https://dotenvx.com","keywords":["dotenv","env",".env","environment","variables","config","settings"],"readmeFilename":"README.md","license":"BSD-2-Clause","devDependencies":{"@types/node":"^18.11.3","decache":"^4.6.2","sinon":"^14.0.1","standard":"^17.0.0","standard-version":"^9.5.0","tap":"^19.2.0","typescript":"^4.8.4"},"engines":{"node":">=12"},"browser":{"fs":false}}');

/***/ })

};
;